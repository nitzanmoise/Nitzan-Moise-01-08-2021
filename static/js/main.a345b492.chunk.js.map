{"version":3,"sources":["components/NavBar.js","actions/weatherTypes.js","actions/weatherActions.js","components/Dailyforcast.js","containers/WeatherList.js","pages/Weather.js","containers/FavoritesList.js","pages/Favorites.js","App.js","reducers/weatherReducer.js","reducers/rootReducer.js","index.js"],"names":["NavBar","className","AppBar","position","Toolbar","to","Button","FETCH_WEATHER_REQUEST","FETCH_WEATHER_SUCCESS","FETCH_WEATHER_FAILURE","FETCH_CITY_REQUEST","FETCH_CITY_SUCCESS","FETCH_CITY_FAILURE","FETCH_WEEEKLY_REQUEST","FETCH_WEEKLY_SUCCESS","FETCH_WEEKLY_FAILURE","UPDATE_CURRENT_LOCATION","ADD_TO_FAVORITES","REMOVE_FROM_FAVORITES","key","fetchCity","city","query","dispatch","fetchCityRequest","fetch","then","response","json","data","stringyCity","JSON","stringify","localStorage","setItem","fetchCitySuccess","fetchWeather","Key","catch","error","fetchCityFailure","message","id","fetchWeatherRequest","weather","stringyWeather","fetchWeatherSuccess","fetchWeeklyWeather","fetchWeatherFailure","fetchWeeklyWeatherRequest","stringyWeeklyWeather","fetchWeeklyWeatherSuccess","updateCurrLocation","fetchWeeklyWeatherFailure","type","payload","cityStorage","parse","getItem","Weather","weatherStorage","wweeklyStorage","removeLocationFromFavorites","location","useStyles","makeStyles","root","minWidth","width","margin","bullet","display","transform","title","fontSize","pos","marginBottom","Dailyforcast","day","index","classes","useState","temprature","setTemprature","isCelius","setIsCelsius","weekday","setWeekday","dayOfWeek","useEffect","degrees","Temperature","Maximum","Value","currDay","filter","item","i","Card","CardContent","Typography","color","gutterBottom","onClick","fahrenheit","celsius","Math","floor","connect","state","wetherData","addToFavorites","addLocationToFavorites","removeFromFavorites","isFav","setIsFav","Grid","container","direction","justifyContent","alignItems","spacing","LocalizedName","currWeather","Metric","Unit","style","size","WeatherText","weeklyWeather","DailyForecasts","map","value","setValue","handleChange","e","target","replace","xs","placeholder","name","onChange","favorites","length","loc","chooseFav","CardActions","console","log","removeLoc","Favorites","App","path","BottomNavigation","initialState","loading","reducer","action","rootReducer","combineReducers","weatherReducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a345b492.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Toolbar, Button, AppBar } from \"@material-ui/core\";\r\nimport { Link } from \"react-router-dom\";\r\nconst NavBar = () => {\r\n  return (\r\n    <div className=\"NavBar\">\r\n      <AppBar position=\"static\">\r\n        <Toolbar>\r\n          <Link to=\"/weather\">\r\n            <Button>Weather</Button>\r\n          </Link>\r\n          <Link to=\"/favorites\">\r\n            <Button>Favorites</Button>\r\n          </Link>\r\n        </Toolbar>\r\n      </AppBar>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default NavBar;\r\n","// Get\r\nexport const FETCH_WEATHER_REQUEST = \"FETCH_USERS_REQUEST\";\r\nexport const FETCH_WEATHER_SUCCESS = \"FETCH_USERS_SUCCESS\";\r\nexport const FETCH_WEATHER_FAILURE = \"FETCH_USERS_FAILURE\";\r\n\r\nexport const FETCH_CITY_REQUEST = \"FETCH_CITY_REQUEST\";\r\nexport const FETCH_CITY_SUCCESS = \"FETCH_CITY_SUCCESS\";\r\nexport const FETCH_CITY_FAILURE = \"FETCH_CITY_FAILURE\";\r\n\r\nexport const FETCH_WEEEKLY_REQUEST = \"FETCH_WEEEKLY_REQUEST\";\r\nexport const FETCH_WEEKLY_SUCCESS = \"FETCH_WEEKLY_SUCCESS\";\r\nexport const FETCH_WEEKLY_FAILURE = \"FETCH_WEEKLY_FAILURE\";\r\n\r\nexport const UPDATE_CURRENT_LOCATION = \"UPDATE_CURRENT_LOCATION\";\r\nexport const ADD_TO_FAVORITES = \"ADD_TO_FAVORITES\";\r\nexport const REMOVE_FROM_FAVORITES = \"REMOVE_FROM_FAVORITES\";\r\n","import {\r\n  FETCH_WEATHER_REQUEST,\r\n  FETCH_WEATHER_SUCCESS,\r\n  FETCH_WEATHER_FAILURE,\r\n  FETCH_CITY_REQUEST,\r\n  FETCH_CITY_SUCCESS,\r\n  FETCH_CITY_FAILURE,\r\n  ADD_TO_FAVORITES,\r\n  REMOVE_FROM_FAVORITES,\r\n  FETCH_WEEEKLY_REQUEST,\r\n  FETCH_WEEKLY_SUCCESS,\r\n  FETCH_WEEKLY_FAILURE,\r\n  UPDATE_CURRENT_LOCATION,\r\n} from \"./weatherTypes\";\r\n\r\nconst key = \"gHA6iqGvA52XLn2GWhVSUTrPWIMmHqzB\";\r\n\r\nexport const fetchCity = (city) => {\r\n  const url =\r\n    \"http://dataservice.accuweather.com/locations/v1/cities/autocomplete\";\r\n\r\n  const query = `?apikey=${key}&q=${city}`;\r\n\r\n  return (dispatch) => {\r\n    dispatch(fetchCityRequest());\r\n    fetch(url + query)\r\n      .then((response) => response.json())\r\n\r\n      .then((data) => {\r\n        // response.data is the city\r\n        const city = data[0];\r\n        let stringyCity = JSON.stringify(city);\r\n\r\n        localStorage.setItem(\"city\", stringyCity);\r\n\r\n        dispatch(fetchCitySuccess(city));\r\n        dispatch(fetchWeather(city.Key));\r\n      })\r\n\r\n      .catch((error) => {\r\n        // error.message is the error message\r\n        dispatch(fetchCityFailure(error.message));\r\n        dispatch(fetchWeather(city.Key));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchWeather = (id) => {\r\n  const url = \"http://dataservice.accuweather.com/currentconditions/v1/\";\r\n  const query = `${id}?apikey=${key}`;\r\n\r\n  return (dispatch) => {\r\n    dispatch(fetchWeatherRequest());\r\n    fetch(url + query)\r\n      .then((response) => response.json())\r\n\r\n      .then((data) => {\r\n        // response.data is the weather\r\n        const weather = data[0];\r\n        let stringyWeather = JSON.stringify(weather);\r\n        localStorage.setItem(\"weather\", stringyWeather);\r\n        dispatch(fetchWeatherSuccess(weather));\r\n        dispatch(fetchWeeklyWeather(id));\r\n      })\r\n      .catch((error) => {\r\n        // error.message is the error message\r\n        dispatch(fetchWeatherFailure(id));\r\n        dispatch(fetchWeeklyWeather(id));\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchWeeklyWeather = (id) => {\r\n  const url = \"http://dataservice.accuweather.com/forecasts/v1/daily/5day/\";\r\n  const query = `${id}?apikey=${key}`;\r\n\r\n  return (dispatch) => {\r\n    dispatch(fetchWeeklyWeatherRequest());\r\n    fetch(url + query)\r\n      .then((response) => response.json())\r\n\r\n      .then((data) => {\r\n        let stringyWeeklyWeather = JSON.stringify(data);\r\n        localStorage.setItem(\"weekly\", stringyWeeklyWeather);\r\n        dispatch(fetchWeeklyWeatherSuccess(data));\r\n        dispatch(updateCurrLocation());\r\n      })\r\n      .catch((error) => {\r\n        // error.message is the error message\r\n        dispatch(fetchWeeklyWeatherFailure(error.message));\r\n        dispatch(updateCurrLocation());\r\n      });\r\n  };\r\n};\r\n\r\nexport const fetchCityRequest = () => {\r\n  return {\r\n    type: FETCH_CITY_REQUEST,\r\n  };\r\n};\r\n\r\nexport const fetchCitySuccess = (city) => {\r\n  return {\r\n    type: FETCH_CITY_SUCCESS,\r\n    payload: city,\r\n  };\r\n};\r\n\r\nexport const fetchCityFailure = (error) => {\r\n  const cityStorage = JSON.parse(localStorage.getItem(\"city\"));\r\n\r\n  return {\r\n    type: FETCH_CITY_FAILURE,\r\n    payload: cityStorage,\r\n  };\r\n};\r\n\r\nexport const fetchWeatherRequest = () => {\r\n  return {\r\n    type: FETCH_WEATHER_REQUEST,\r\n  };\r\n};\r\n\r\nexport const fetchWeatherSuccess = (Weather) => {\r\n  return {\r\n    type: FETCH_WEATHER_SUCCESS,\r\n    payload: Weather,\r\n  };\r\n};\r\n\r\nexport const fetchWeatherFailure = (key) => {\r\n  const weatherStorage = JSON.parse(localStorage.getItem(\"weather\"));\r\n  fetchWeather(key);\r\n  return {\r\n    type: FETCH_WEATHER_FAILURE,\r\n    payload: weatherStorage,\r\n  };\r\n};\r\n\r\nexport const fetchWeeklyWeatherRequest = () => {\r\n  return {\r\n    type: FETCH_WEEEKLY_REQUEST,\r\n  };\r\n};\r\n\r\nexport const fetchWeeklyWeatherSuccess = (Weather) => {\r\n  return {\r\n    type: FETCH_WEEKLY_SUCCESS,\r\n    payload: Weather,\r\n  };\r\n};\r\n\r\nexport const fetchWeeklyWeatherFailure = (error) => {\r\n  const wweeklyStorage = JSON.parse(localStorage.getItem(\"weekly\"));\r\n  return {\r\n    type: FETCH_WEEKLY_FAILURE,\r\n    payload: wweeklyStorage,\r\n  };\r\n};\r\n\r\nexport const updateCurrLocation = () => {\r\n  return {\r\n    type: UPDATE_CURRENT_LOCATION,\r\n  };\r\n};\r\n\r\nexport const addLocationToFavorites = (location) => {\r\n  return {\r\n    type: ADD_TO_FAVORITES,\r\n    payload: location,\r\n  };\r\n};\r\n\r\nexport const removeLocationFromFavorites = (location) => {\r\n  return {\r\n    type: REMOVE_FROM_FAVORITES,\r\n    payload: location,\r\n  };\r\n};\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 105,\r\n    width: \"80%\",\r\n    margin: \"10px\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nfunction Dailyforcast({ day, index }) {\r\n  const classes = useStyles();\r\n  const [temprature, setTemprature] = useState(\"\");\r\n  const [isCelius, setIsCelsius] = useState(false);\r\n  const [weekday, setWeekday] = useState(\"\");\r\n  const dayOfWeek = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\"];\r\n\r\n  const fahrenheitToCelsius = (fahrenheit) =>\r\n    Math.floor(((fahrenheit - 32) * 5) / 9);\r\n  const celsiusToFahrenheit = (celsius) => Math.floor((celsius * 9) / 5 + 32);\r\n\r\n  useEffect(() => {\r\n    const degrees = day.Temperature.Maximum.Value;\r\n    const currDay = dayOfWeek.filter((item, i) => i === index);\r\n    setTemprature(degrees);\r\n    setWeekday(currDay);\r\n  }, []);\r\n\r\n  function changeTemprature() {\r\n    if (isCelius) {\r\n      setTemprature(celsiusToFahrenheit(temprature));\r\n      setIsCelsius(false);\r\n    } else {\r\n      setTemprature(fahrenheitToCelsius(temprature));\r\n      setIsCelsius(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Card className={classes.root}>\r\n        <CardContent>\r\n          <Typography\r\n            className={classes.title}\r\n            color=\"textSecondary\"\r\n            gutterBottom\r\n          >\r\n            {weekday}\r\n          </Typography>\r\n          <Typography\r\n            className={classes.title}\r\n            color=\"textSecondary\"\r\n            gutterBottom\r\n          >\r\n            {temprature}\r\n            {isCelius ? \"C\" : \"F\"}\r\n          </Typography>\r\n          <Button onClick={changeTemprature} color=\"primary\">\r\n            {isCelius ? \"Ferenite\" : \"Celsius\"}\r\n          </Button>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dailyforcast;\r\n","import React, { useState } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchCity,\r\n  addLocationToFavorites,\r\n  removeLocationFromFavorites,\r\n} from \"../actions/weatherActions\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport Dailyforcast from \"../components/Dailyforcast\";\r\n\r\nfunction WeatherList({ wetherData, addToFavorites, removeFromFavorites }) {\r\n  const [isFav, setIsFav] = useState(false);\r\n\r\n  function toggleFavoriteLocation() {\r\n    if (isFav) {\r\n      setIsFav(false);\r\n      removeFromFavorites(wetherData.location);\r\n    } else {\r\n      setIsFav(true);\r\n\r\n      addToFavorites(wetherData.location);\r\n    }\r\n  }\r\n  return (\r\n    <div>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={3}\r\n      >\r\n        <div className=\"weather-panal\">\r\n          <header>\r\n            <section>\r\n              <h3>{wetherData.location.city.LocalizedName}</h3>\r\n              <p>\r\n                {wetherData.location.currWeather.Temperature.Metric.Value}\r\n                {wetherData.location.currWeather.Temperature.Metric.Unit}\r\n              </p>\r\n            </section>\r\n            <section>\r\n              <FavoriteIcon\r\n                style={{ color: isFav ? \"gold\" : \"black\" }}\r\n                className=\"heart\"\r\n              ></FavoriteIcon>\r\n              <Button onClick={toggleFavoriteLocation} size=\"medium\">\r\n                {isFav ? \"Remove from favorites\" : \"Add to favorites\"}\r\n              </Button>\r\n            </section>\r\n          </header>\r\n          <h1>{wetherData.location.currWeather.WeatherText}</h1>\r\n          <div className=\"daily-list\">\r\n            <Grid\r\n              container\r\n              direction=\"row\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              spacing={3}\r\n            >\r\n              {wetherData.location.weeklyWeather.DailyForecasts.map(\r\n                (item, index) => (\r\n                  <Dailyforcast\r\n                    key={index}\r\n                    day={item}\r\n                    index={index}\r\n                  ></Dailyforcast>\r\n                )\r\n              )}\r\n            </Grid>\r\n          </div>\r\n        </div>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    wetherData: state.weather,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchCity: (city) => dispatch(fetchCity(city)),\r\n    addToFavorites: (location) => dispatch(addLocationToFavorites(location)),\r\n    removeFromFavorites: (location) =>\r\n      dispatch(removeLocationFromFavorites(location)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherList);\r\n","import { Grid } from \"@material-ui/core\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\nimport WeatherList from \"../containers/WeatherList\";\r\nimport SearchIcon from \"@material-ui/icons/Search\";\r\nimport { fetchCity } from \"../actions/weatherActions\";\r\nimport { connect } from \"react-redux\";\r\n\r\nfunction Weather({ fetchCity, wetherData }) {\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    // Setting default city\r\n    if (wetherData.city.Key === \"\") {\r\n      fetchCity(\"Tel Aviv\");\r\n    }\r\n  });\r\n\r\n  function handleChange(e) {\r\n    let value = e.target.value;\r\n    // Only English characters\r\n    value = value.replace(/[^A-Za-z]/gi, \"\");\r\n\r\n    setValue(value);\r\n    fetchCity(e.target.value);\r\n  }\r\n  return (\r\n    <div className=\"Weather\">\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={3}\r\n      >\r\n        <Grid item xs={12}>\r\n          <h1>Search for locations</h1>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search..\"\r\n            name=\"search\"\r\n            value={value}\r\n            onChange={handleChange}\r\n          />\r\n          <button onClick={handleChange}>\r\n            <SearchIcon className=\"search\"></SearchIcon>\r\n          </button>\r\n        </Grid>\r\n      </Grid>{\" \"}\r\n      <WeatherList></WeatherList>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    wetherData: state.weather,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchCity: (city) => dispatch(fetchCity(city)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Weather);\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  removeLocationFromFavorites,\r\n  fetchCity,\r\n} from \"../actions/weatherActions\";\r\nimport { Grid } from \"@material-ui/core\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FavoriteIcon from \"@material-ui/icons/Favorite\";\r\nimport ArrowForwardIcon from \"@material-ui/icons/ArrowForward\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 175,\r\n    width: 100,\r\n    margin: \"10px\",\r\n  },\r\n  bullet: {\r\n    display: \"inline-block\",\r\n    margin: \"0 2px\",\r\n    transform: \"scale(0.8)\",\r\n  },\r\n  title: {\r\n    fontSize: 14,\r\n  },\r\n  pos: {\r\n    marginBottom: 12,\r\n  },\r\n});\r\n\r\nfunction FavoritesList({ wetherData, removeFromFavorites }) {\r\n  const classes = useStyles();\r\n  function chooseFav(loc) {\r\n    fetchCity(loc.city.LocalizedName);\r\n  }\r\n  function removeLoc(loc) {\r\n    removeFromFavorites(loc);\r\n    console.log(\"in remove loc\");\r\n  }\r\n  return (\r\n    <div>\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n      >\r\n        {wetherData.favorites.length > 0 &&\r\n          wetherData.favorites.map((loc, index) => (\r\n            <Card key={index} className={classes.root}>\r\n              <div className=\"fav-header\">\r\n                <FavoriteIcon className=\"heart\"></FavoriteIcon>\r\n\r\n                <Link className=\"arrow-link\" to=\"/weather\">\r\n                  <ArrowForwardIcon\r\n                    onClick={() => chooseFav(loc)}\r\n                  ></ArrowForwardIcon>\r\n                </Link>\r\n              </div>\r\n\r\n              <CardContent>\r\n                <Typography\r\n                  className={classes.title}\r\n                  color=\"textSecondary\"\r\n                  gutterBottom\r\n                >\r\n                  City: {loc.city.LocalizedName}\r\n                </Typography>\r\n                <Typography\r\n                  className={classes.title}\r\n                  color=\"textSecondary\"\r\n                  gutterBottom\r\n                >\r\n                  Id: {loc.id}\r\n                </Typography>\r\n                <Typography\r\n                  className={classes.title}\r\n                  color=\"textSecondary\"\r\n                  gutterBottom\r\n                >\r\n                  Temperature: {loc.currWeather.Temperature.Metric.Value}{\" \"}\r\n                  {loc.currWeather.Temperature.Metric.Unit}\r\n                </Typography>\r\n              </CardContent>\r\n              <CardActions>\r\n                <Button onClick={() => removeLoc(loc)} size=\"medium\">\r\n                  Remove from favorites\r\n                </Button>\r\n              </CardActions>\r\n            </Card>\r\n          ))}\r\n      </Grid>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    wetherData: state.weather,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    removeFromFavorites: (location) =>\r\n      dispatch(removeLocationFromFavorites(location)),\r\n    fetchCity: (city) => dispatch(fetchCity(city)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(FavoritesList);\r\n","import FavoritesList from \"../containers/FavoritesList\";\r\nimport { Grid } from \"@material-ui/core\";\r\n\r\nfunction Favorites() {\r\n  return (\r\n    <div className=\"Favorites\">\r\n      <Grid\r\n        container\r\n        direction=\"row\"\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        spacing={3}\r\n      >\r\n        <Grid item xs={12}>\r\n          <h1>Favorites</h1>\r\n        </Grid>\r\n      </Grid>\r\n      <FavoritesList></FavoritesList>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Favorites;\r\n","import \"./App.scss\";\nimport NavBar from \"./components/NavBar\";\nimport Weather from \"./pages/Weather\";\nimport Favorites from \"./pages/Favorites\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { BottomNavigation } from \"@material-ui/core\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Router>\n        <NavBar></NavBar>\n        <Switch>\n          <Route path=\"/weather\">\n            <Weather />\n          </Route>\n          <Route path=\"/favorites\">\n            <Favorites />\n          </Route>\n        </Switch>\n        <BottomNavigation></BottomNavigation>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","import {\r\n  FETCH_WEATHER_REQUEST,\r\n  FETCH_WEATHER_SUCCESS,\r\n  FETCH_WEATHER_FAILURE,\r\n  FETCH_CITY_REQUEST,\r\n  FETCH_CITY_SUCCESS,\r\n  FETCH_CITY_FAILURE,\r\n  FETCH_WEEEKLY_REQUEST,\r\n  FETCH_WEEKLY_SUCCESS,\r\n  FETCH_WEEKLY_FAILURE,\r\n  UPDATE_CURRENT_LOCATION,\r\n  ADD_TO_FAVORITES,\r\n  REMOVE_FROM_FAVORITES,\r\n} from \"../actions/weatherTypes\";\r\n\r\nconst initialState = {\r\n  loading: false,\r\n  city: { Key: \"\" },\r\n  location: {\r\n    city: { Key: \"\", LocalizedName: \"\" },\r\n    currWeather: {\r\n      WeatherText: \"\",\r\n      Temperature: { Metric: { Value: \"\", Unit: \"\" } },\r\n    },\r\n    weeklyWeather: { DailyForecasts: [] },\r\n    id: \"\",\r\n  },\r\n  currWeather: {},\r\n  weeklyWeather: {},\r\n  favorites: [],\r\n  error: \"\",\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case FETCH_CITY_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_CITY_SUCCESS:\r\n      return {\r\n        ...state,\r\n        city: action.payload,\r\n      };\r\n    case FETCH_CITY_FAILURE:\r\n      return {\r\n        loading: false,\r\n        ...state,\r\n        city: action.payload,\r\n        error: \"error\",\r\n      };\r\n    case FETCH_WEATHER_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_WEATHER_SUCCESS:\r\n      return {\r\n        ...state,\r\n\r\n        currWeather: action.payload,\r\n      };\r\n    case FETCH_WEATHER_FAILURE:\r\n      return {\r\n        ...state,\r\n        currWeather: action.payload,\r\n        error: \"error\",\r\n      };\r\n    case FETCH_WEEEKLY_REQUEST:\r\n      return {\r\n        ...state,\r\n        loading: true,\r\n      };\r\n    case FETCH_WEEKLY_SUCCESS:\r\n      return {\r\n        ...state,\r\n\r\n        weeklyWeather: action.payload,\r\n      };\r\n    case FETCH_WEEKLY_FAILURE:\r\n      return {\r\n        ...state,\r\n        weeklyWeather: action.payload,\r\n        error: \"error\",\r\n      };\r\n    case UPDATE_CURRENT_LOCATION:\r\n      return {\r\n        ...state,\r\n        location: {\r\n          city: state.city,\r\n          currWeather: state.currWeather,\r\n          weeklyWeather: state.weeklyWeather,\r\n          id: state.city.Key,\r\n        },\r\n      };\r\n    case ADD_TO_FAVORITES:\r\n      return {\r\n        ...state,\r\n        favorites: [...state.favorites, action.payload],\r\n      };\r\n    case REMOVE_FROM_FAVORITES:\r\n      return {\r\n        ...state,\r\n        favorites: [\r\n          ...state.favorites.filter((item) => item.id !== action.payload.id),\r\n        ],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { combineReducers } from \"redux\";\r\nimport weatherReducer from \"./weatherReducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n  weather: weatherReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport App from \"./App\";\n\nimport rootReducer from \"./reducers/rootReducer\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport thunk from \"redux-thunk\";\n\nconst store = createStore(rootReducer, applyMiddleware(thunk));\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}